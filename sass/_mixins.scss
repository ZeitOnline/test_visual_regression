@mixin link {
	&:link,
	&:visited {
		@content;
	}
}

@mixin on-interaction {
	&:hover,
	&:active,
	&:focus {
		@content;
	}
}

@mixin default-article-textlink($color: $color-link--default,
                                $hover: $color-link--hover,
                                $border-color: rgba($color-link--default, 0.5),
                                $border-color--hover: rgba($color-link--hover, 0.5),
                                $style: $copytext-link-style) {
	@if $style == 'zco' {
		$border-color: #ddd;
		$border-color--hover: #999;
	}
	a {
		transition-property: border-bottom-color, color;
		transition-duration: 0.2s;
		border-bottom: 1px solid $border-color;
		color: $color;
		&:focus,
		&:hover,
		&:active {
			border-bottom-color: $border-color--hover;
			color: $hover;
		}
	}
}

@mixin plain-transparent-overlay($color: #000, $alpha: 0.3) {
	position: relative;
	&:after {
		background-color: rgba($color, $alpha);
		bottom: 0;
		content: "";
		left: 0;
		position: absolute;
		right: 0;
		top: 0;
	}
}

@mixin fake-box-shadow-inset($color: $black, $alpha_start: 0.7, $alpha_stop: 0, $direction: to top, $length: 60%) {
	background-color: $color;
	position: relative;
	&:after {
		bottom: 0;
		content: "";
		height: 100%;
		left: 0;
		position: absolute;
		right: 0;
		top: 0;
		width: 100%;
		background-image: linear-gradient($direction, rgba($color, $alpha_start) 0%, rgba($color, $alpha_stop) $length);
	}
}

@mixin teaser-image-dark-overlay($color: rgb(0, 15, 20), $angle: 12deg, $gradient: 0) {
	@if $gradient == 0 {
		$gradient: rgba($color, 0.6) 15%, rgba($color, 0.15) 52%, rgba($color, 0) 70%;
	}
	background-color: $color;
	position: relative;
	&:after {
		bottom: 0;
		content: "";
		height: 100%;
		left: 0;
		position: absolute;
		right: 0;
		top: 0;
		width: 100%;
		background-image: linear-gradient($angle, $gradient);
	}
}

@mixin darken-on-hover($color: rgba(0, 0, 0, .1)) {
	position: relative;
	&:before {
		content: "";
		min-height: 100%;
		min-width: 100%;
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
		z-index: 1;
		background-color: $color;
		opacity: 0;
		transition: opacity .2s ease-in-out;
	}
	&:hover:before {
		opacity: 1;
	}

}

@mixin teaser-image-text-shadow($color: rgb(0, 0, 20)) {
	text-shadow: 0 0 20px rgba($color, 0.25);
}

@mixin no-user-select {
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}

// if you change this, please change =unpadded accordingly
@mixin padded {
	padding-left: $page-padding--small;
	padding-right: $page-padding--small;
	@include respond-min($break-page-padding) {
		padding-left: $page-padding;
		padding-right: $page-padding;
	}
}

// should be =padded inverted
@mixin unpadded {
	margin-left: -$page-padding--small;
	margin-right: -$page-padding--small;
	@include respond-min($break-page-padding) {
		margin-left: -$page-padding;
		margin-right: -$page-padding;
	}
}

@mixin visuallyhidden {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
}

@mixin ir {
	display: block;
	overflow: hidden;
	white-space: nowrap;
	text-indent: 150%;
}

@mixin body-type-zoom {
	font-size: $font-ml;
	@include respond-min($break-3) {
		font-size: $font-l;
	}
}

@mixin input-placeholder {
	::-webkit-input-placeholder {
		@content;
	}
	::-moz-placeholder {
		@content;
	}
	::input-placeholder {
		@content;
	}
}

@mixin justify-children-horizontally($elements-selector, $vertical-alignment: top) {
	text-align: justify;
	text-justify: distribute-all-lines;
	-ms-text-justify: distribute-all-lines;
	// this :after is sort-of a hack to justify the elements selected by $elements-selector
	// > short explanation:
	//   the elements get 'inline-block'-ed and can therefore be justified via 'justify'.
	//   but: justification happens for every *line* except the last one, which is left-aligned.
	//   hence the need to have an additional line, which is provided by :after.
	//   it takes up a whole line (width: 100%) and is invisible due to it's font-size and line-height of 0
	// source: http://stackoverflow.com/questions/6865194/fluid-width-with-equally-spaced-divs
	&:after {
		@include inline-block;
		content: "";
		font-size: 0;
		line-height: 0;
		width: 100%;
	}
	& > * {
		text-align: left;
	}
	@at-root #{$elements-selector} {
		@include inline-block($vertical-alignment);
	}
}

@mixin animated-interaction($color: $color-link--hover, $border-color: false) {
	@if $border-color == false {
		$border-color: $color;
	}
	transition-property: border-bottom-color, color;
	transition-duration: 0.2s;
	border-bottom: 1px solid transparent;
	@include on-interaction {
		color: $color;
		border-color: $border-color;
	}
}

@mixin drop_icon($open: false, $cross: true) {
	@if $open {
		@if $cross {
			content: "+";
			font-size: 1.5em;
			line-height: 0;
			margin-left: remify(1px);
			position: relative;
			top: remify(2px);
			transform: rotate(-45deg);
			transform-origin: 50% 50%;
		}
		@else {
			transform: rotate(-180deg);
		}
	}
	@else {
		content: "â–¾";
		display: inline-block; // needed for working transformation
		margin: remify(0 0 0 3px);
		transition: transform .5s;
		transform-origin: 50% 55%;
	}
}

@mixin transform-origin($value...) {
	-webkit-transform-origin: $value;
	   -moz-transform-origin: $value;
	    -ms-transform-origin: $value;
	        transform-origin: $value;
}

@mixin zon-button($background-color,
	              $hover-background-color,
	              $color,
	              $hover-color,
	              $visited-color,
	              $border-color: transparent,
	              $hover-border-color: transparent,
	              $font-size: remify(13px),
	              $font-weight: bold,
	              $letter-spacing: $letter-spacing-l,
	              $margin: remify(14px 6px),
	              $padding: remify(8px 16px),
	              $disabled: true
	) {
	@include inline-block(none);
	background-color: $background-color;
	border-radius: 5px;
	@if $border-color != transparent {
		border: 2px solid $border-color;
	}
	color: $color;
	font-size: $font-size;
	font-weight: $font-weight;
	letter-spacing: $letter-spacing;
	line-height: remify(18px);
	margin: $margin;
	padding: $padding;
	text-align: center;
	text-transform: uppercase;
	transition: all 0.15s ease-in-out;
	&:visited {
		color: $visited-color;
	}
	&:hover,
	&:focus {
		background-color: $hover-background-color;
		@if $hover-border-color != transparent {
			border-color: $hover-border-color;
		}
		color: $hover-color;
		cursor: pointer;
	}
	@if $disabled {
		&[disabled] {
			opacity: 0.5;
		}
		&[disabled]:hover,
		&[disabled]:focus {
			background-color: $background-color;
			@if $border-color != transparent {
				border-color: $border-color;
			}
			color: $color;
			cursor: default;
		}
	}
	@if (lightness($color) > 50 and $font-weight == bold) {
		@include font-smoothing()
	}
}

@mixin zon-button-inky($margin: 0) {
	@include zon-button($background-color: $zon-dark-grey,
	                    $hover-background-color: $zon-charcoal,
	                    $color: $white,
	                    $hover-color: $white,
	                    $visited-color: $white,
	                    $font-weight: normal,
	                    $letter-spacing: 0.1em,
	                    $margin: $margin,
	                    $padding: remify(7px 15px 6px)
	);
}

@mixin zon-button-dark($color: $zon-lighter-grey, $margin: remify(14px 6px)) {
	@include zon-button($background-color: rgba(0, 0, 0, 0.2),
	                    $hover-background-color: rgba(0, 0, 0, 0.5),
	                    $color: $color,
	                    $hover-color: $white,
	                    $visited-color: $color,
	                    $border-color: $zon-mid-grey,
	                    $hover-border-color: $zon-alto,
	                    $margin: $margin,
	                    $disabled: false
	);
}

@mixin zon-button-light($margin: 0, $background: 'colored') {
	$background-color: rgba(235, 235, 235, 0.5);
	$hover-background-color: rgba(235, 235, 235, 0.2);

	@if $background == 'light' {
		$background-color: rgba(255, 255, 255, 0.5);
		$hover-background-color: rgba(255, 255, 255, 0.8);
	}

	@include zon-button($background-color: $background-color,
	                    $hover-background-color: $hover-background-color,
	                    $color: $zon-charcoal,
	                    $hover-color: $black,
	                    $visited-color: $zon-charcoal,
	                    $border-color: $zon-light-grey,
	                    $hover-border-color: $zon-mid-grey,
	                    $margin: $margin
	);
}

// default color = green, e.g. Stellenmarkt
// Stellenmarkt: #168750
// Studium: #a60e00
// Reise: #c27800
// Shop: #d11c08
// Automarkt: #eb5e00
// Immobilien: #e6a800
// Partnersuche: #800015
// Misc1: #40120d
// Misc2: #3a43a6
// Misc3: #42661f
@mixin zon-button-colored($base-color: #168750, $margin: 0) {
	@include zon-button($background-color: rgba($base-color, .8),
	                    $hover-background-color: rgba($base-color, 1),
	                    $color: $white,
	                    $hover-color: $white,
	                    $visited-color: $white,
	                    $margin: $margin,
	                    $padding: remify(10px 16px),
	                    $disabled: false
	);
}

@mixin zon-gate-button($base-color: #b91109, $margin: 0) {
	@include zon-button($background-color: rgba($base-color, 1),
	                    $hover-background-color: darken(rgba($base-color, 1), 10%),
	                    $color: $white,
	                    $hover-color: $white,
	                    $visited-color: $white,
	                    $margin: $margin,
	                    $padding: remify(10px 16px),
	                    $disabled: false
	);
}

// mac font smoothing switching
// please use extremely carefully http://usabilitypost.com/2012/11/05/stop-fixing-font-smoothing/
// rather use case may be **light text on dark background**
// switching off fontsmoothing is prohibited except on high density mobile safari screens (see media query)
// @param {bool} $antialiased [true] - switch on antialiasing
@mixin font-smoothing($antialiased: true) {
	@if $antialiased {
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
		text-rendering: optimizeLegibility;
	}
	@else {
		@media only screen and (-webkit-min-device-pixel-ratio: 1.25), only screen and (min-device-pixel-ratio: 1.25), only screen and (min-resolution: 200dpi), only screen and (min-resolution: 1.25dppx) {
			-webkit-font-smoothing: subpixel-antialiased;
			-moz-osx-font-smoothing: auto;
		}
	}
}

// animating elements *on hover* over one of it's parents
// @param {element} $parent  - parent element for hover effect, if not supplied the $element is used
// @param {map} $trans - transition properties
// @property {string} $trans.property [opacity] - transition property
// @property {number} $trans.duration [.5s] - transition duration
// @property {number} $trans.delay [0] - transition delay
// @property {string} $trans.timing [ease-in-out] - transition timing function
// @content css of the animated state
// @output styles for the element, the parent (@-rooted) and the hover state
@mixin transition-on-parent-hover($parent, $trans: ()) {
	$element: &;
	$default-transition: ("property": opacity, "duration": 0.5s, "delay": 0s, "timing": ease-in-out);
	$transition: map_merge($default-transition, $trans);
	transition: map-get($transition, "property") map-get($transition, "duration") map-get($transition, "delay") map-get($transition, "timing");
	@at-root #{$parent} {
		&:hover {
			#{$element} {
				@content;
			}
		}
	}
}

// draws a circle via pseudo-content with border-radius
@mixin make-a-circle($color: $black, $radius: 20px, $border_color: $white, $border_width: 0) {
	position: absolute;
	background-color: $color;
	border-radius: 50%;
	content: "";
	height: remify($radius);
	width: remify($radius);
	@if $border_width > 0 {
		border: $border_width solid $border_color;
	}
}

// build mobile plus/minus button as used in infoxbox
@mixin build-mobile-plus-minus-button($content: '+') {
	background: $zon-mid-grey;
	border-radius: 3px;
	color: $white;
	content: $content;
	cursor: pointer;
	font-size: remify(17px);
	font-weight: normal;
	line-height: remify(17px);
	margin-left: remify(8px);
	text-align: center;
	width: remify(17px);
	display: inline-block;
	@include font-smoothing();
	@include respond-min($break-tablet-min) {
		display: none;
	}
}

// wraps text in liveblog style
@mixin text-wrapper($content: '+ alles anzeigen', $height: 5, $paraLines: 3,
                              $bgColor: $white, $linkColor: $color-link--default, $font-size: inherit) {
	cursor: pointer;
    max-height: $height * 1.4 * em(18px);

	@include respond-min($break-desktop-min) {
		max-height: $height * 1.5 * em(20px); // 5 lines paragraph text
	}

	&:before {
		transition-duration: .2s;
		transition-property: border-bottom-color, color;
		border-bottom: 1px solid rgba($color-link--default, .5);
		bottom: 0;
		color: $linkColor;
		content: $content;
		font-size: $font-size;
		left: 0;
		letter-spacing: $zon-letter-spacing-s;
		position: absolute;
		z-index: 1;
	}

	&:hover:before {
		border-bottom-color: rgba($color-link--hover, .5);
		color: $color-link--hover;
	}

	&:after {
		background-image: linear-gradient(0deg, rgba($bgColor, 1) 1.5em, rgba($bgColor, 0) 100%);
		bottom: 0;
		content: "";
		height: $paraLines * 1.5 * em(20px);
		left: 0;
		position: absolute;
		right: 0;
	}
}

@mixin scaled-font($size: 12px, $factor: $font-factor){
	font-size: em($size * $factor);
}

@mixin scaled-font-rem($size: 12px, $factor: $font-factor){
	font-size: remify($size * $factor);
}

@mixin link-colors($normal, $hover: false, $active: false, $visited: false, $focus: false) {
	color: $normal;

	@if $visited {
		&:visited {
			color: $visited;
		}
	}

	@if $focus {
		&:focus {
			color: $focus;
		}
	}

	@if $hover {
		&:hover {
			color: $hover;
		}
	}

	@if $active {
		&:active {
			color: $active;
		}
	}
}

$inline-block-alignment: none !default;
@mixin inline-block($alignment: $inline-block-alignment, $ie-alignment: auto) {
	// standard
	display: inline-block;

	@if $alignment and $alignment != none {
		vertical-align: $alignment;
	}

	// legacy IE support
	@if $old-ie and $old-ie == true {
		@if $ie-alignment and $ie-alignment != none {
			*vertical-align: $ie-alignment;
		}

		*zoom: 1;
		*display: inline;
	}
}

@mixin has-layout {
	@if $old-ie and $old-ie == true {
		*zoom: 1;
	}
}

@mixin clearfix {
	overflow: hidden;

	@include has-layout;
}

@mixin pie-clearfix {
	&:after {
		content: "";
		display: block; // http://cssmojo.com/the-very-latest-clearfix-reloaded/
		clear: both;
	}

	@include has-layout;
}

//  Background svg mixin
@mixin background-svg($svg){
    background-image: svg-url($svg);
}
